<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   version="1.0"
   width="1024.000000pt"
   height="1024.000000pt"
   viewBox="0 0 1024.000000 1024.000000"
   preserveAspectRatio="xMidYMid meet"
   id="svg17"
   sodipodi:docname="LOGO TEST MECHKA FOOD.svg"
   xml:space="preserve"
   inkscape:version="1.3.1 (91b66b0783, 2023-11-16)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs17"><meshgradient
       inkscape:collect="always"
       id="meshgradient1"
       gradientUnits="userSpaceOnUse"
       x="-9959.3164"
       y="-3801.1013"><meshrow
         id="meshrow1"><meshpatch
           id="meshpatch1"><stop
             path="c 2547.47,0  5094.93,0  7642.4,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop1" /><stop
             path="c 0,3144.21  0,6288.43  0,9432.64"
             style="stop-color:#280b0b;stop-opacity:1"
             id="stop2" /><stop
             path="c -2547.47,0  -5094.93,0  -7642.4,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop3" /><stop
             path="c 0,-3144.21  0,-6288.43  0,-9432.64"
             style="stop-color:#280b0b;stop-opacity:1"
             id="stop4" /></meshpatch></meshrow></meshgradient><meshgradient
       inkscape:collect="always"
       id="meshgradient4" /></defs><sodipodi:namedview
     id="namedview17"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="pt"
     showgrid="false"
     inkscape:zoom="0.46362303"
     inkscape:cx="623.35126"
     inkscape:cy="779.7283"
     inkscape:window-width="1600"
     inkscape:window-height="829"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="g1"><inkscape:page
       x="0"
       y="0"
       width="1024"
       height="1024"
       id="page18"
       margin="0"
       bleed="0" /><inkscape:page
       x="1034"
       y="0"
       width="626"
       height="626"
       id="page19"
       margin="0"
       bleed="0" /></sodipodi:namedview><g
     transform="translate(0.000000,1024.000000) scale(0.100000,-0.100000)"
     fill="#000000"
     stroke="none"
     id="g17"
     style="fill-opacity:1;fill:url(#meshgradient4)" /><g
     transform="matrix(0.1,0,0,-0.1,1034,626)"
     fill="#000000"
     stroke="none"
     id="g1"
     style="fill-opacity:1;fill:url(#meshgradient1)"><path
       id="path1-0"
       d="m -5890.0344,5608.8944 c -267.9503,-50.11 -542.0182,-168.8488 -794.0626,-344.2337 l -102.7755,-71.8968 -116.2342,18.5188 c -167.6217,27.2338 -380.5138,33.7699 -524.8888,17.4297 -516.3243,-57.7354 -912.7437,-349.6804 -1118.2947,-822.4568 l -33.0349,-76.2544 -102.7755,-18.5189 c -265.5033,-49.0205 -423.337,-114.3814 -535.9006,-221.1373 -85.6461,-81.7011 -123.5751,-160.134 -132.1399,-273.4261 -8.5646,-94.7732 25.694,-225.4947 86.8698,-333.34 l 41.5996,-72.9864 -41.5996,-96.9518 c -91.7637,-217.8693 -79.5286,-375.8246 39.1526,-491.2954 83.1991,-83.8797 201.8804,-128.5429 397.643,-154.6873 84.4227,-10.8935 110.1165,-18.5188 144.3751,-45.7525 124.7987,-96.9518 183.4116,40.8594 824.5346,71.361 l 220.3491,-141.0792 -7.3411,-334.4295 c -31.6051,-1354.69924 -258.6028,468.7965 3887.98,-228.4443 51.6973,-8.6929 -156.2527,590.1074 -216.205,915.8222 -47.7172,261.4432 -46.4937,270.1579 77.0817,375.8246 84.4227,72.9862 166.3983,114.3814 439.2426,222.2268 174.963,69.7181 345.0318,194.993 418.4428,309.3744 48.9407,75.1649 75.8582,168.8488 74.6346,266.8901 -1.2235,115.4706 -29.3644,206.9758 -102.7755,331.1613 l -59.9522,102.3987 v 120.9173 c -1.2236,410.6838 -214.1155,672.1271 -630.1115,770.1683 -73.4109,17.4295 -149.269,23.9656 -308.3262,28.323 -221.4567,6.5361 -358.4906,-3.268 -565.2651,-41.3951 l -113.787,-20.6976 -81.9756,47.9312 c -168.8455,99.1306 -348.7025,166.67 -531.0065,197.1718 -139.4809,23.9656 -389.0785,20.6976 -533.4535,-6.5361 z m 590.9588,-117.6494 c 126.0222,-29.4125 304.6557,-105.6667 425.784,-181.921 l 99.1049,-62.0927 117.4576,23.9656 c 230.0212,44.6632 286.3031,50.1099 527.3359,49.0206 205.5509,0 252.0446,-3.2681 336.4673,-23.9657 280.1854,-68.6288 442.9132,-204.7971 515.1008,-432.4706 14.6821,-45.7526 22.0232,-116.5601 23.2468,-230.9416 3.6704,-144.8831 7.341,-169.938 28.1407,-196.0824 83.1993,-105.6666 137.0341,-246.1923 137.0341,-358.3951 0,-139.4363 -66.07,-257.0858 -200.657,-354.0376 -70.9638,-51.1994 -119.9046,-75.165 -423.3368,-203.708 -146.8221,-61.0033 -256.9387,-130.7214 -321.7851,-200.4397 -50.1641,-54.4674 -92.9872,-132.9004 -94.2108,-169.9381 0,-19.6083 -4.894,-22.8763 -26.9173,-18.519 -47.7172,9.8042 -146.8221,27.2338 -230.0212,40.3059 -67.2935,9.8041 -84.4227,17.4295 -115.0107,49.0206 -19.5762,19.6083 -48.9407,66.4501 -66.0698,103.488 -56.2818,125.2749 -15.9057,249.4603 119.9045,369.2886 74.6346,67.5394 338.9144,226.5841 648.4641,389.9861 220.2332,117.6494 283.8561,157.9552 313.2204,201.5291 17.1293,27.2338 13.4588,25.055 -26.9173,-10.8934 -31.8115,-28.323 -119.9048,-75.165 -249.5975,-133.9897 -241.0329,-108.9347 -500.4185,-236.3882 -615.4291,-302.8384 -277.7384,-157.9552 -379.2905,-352.9483 -296.0912,-564.2816 35.4819,-89.3265 34.2585,-81.701 15.9057,-76.2543 -45.2701,13.0721 -581.1707,39.2165 -754.9101,35.9484 l -199.4334,-3.268 7.3412,49.0205 c 15.9057,104.5774 107.6695,234.2097 309.5498,439.0068 150.4926,152.5087 309.5499,330.0721 348.7024,389.9862 18.3528,27.2337 47.7172,89.3264 66.07,136.1683 30.5879,80.6118 31.8114,94.7732 25.6939,244.0137 -2.447,94.7732 -13.4588,181.921 -24.4704,217.8694 -31.8114,99.1306 -70.964,185.189 -84.4226,185.189 -7.3412,0 -9.7882,-9.8042 -4.8942,-23.9657 68.517,-210.2438 83.1992,-348.591 51.3877,-488.0273 -39.1524,-171.0275 -102.7753,-254.9071 -430.678,-571.9071 -99.105,-95.8626 -205.5509,-203.7078 -234.9152,-239.6564 -70.964,-84.9689 -133.3635,-200.4398 -150.4926,-279.9621 -17.1294,-75.1649 4.894,-67.5394 -261.8328,-84.9689 -107.6695,-6.5361 -282.6325,-21.787 -389.0785,-33.7698 l -192.0922,-21.7869 -35.4819,21.7869 c -58.7288,37.0378 -194.5392,174.2955 -233.6918,235.2989 -53.8348,84.969 -73.4111,141.615 -85.6462,255.9965 -12.2353,110.024 -42.8231,192.8143 -99.105,266.89 -37.929,51.1992 -134.5868,132.9002 -194.5392,165.5807 -69.7404,38.1271 -219.0095,77.3436 -318.1145,83.8796 l -91.7636,5.4468 91.7636,-14.1614 c 215.3391,-35.9486 346.2554,-107.8455 451.4779,-246.1925 57.5054,-78.433 86.8697,-178.6529 86.8697,-305.0171 0,-140.5258 63.6229,-277.7834 194.5393,-421.5771 l 61.1758,-66.4503 -51.3877,-7.6254 c -140.7045,-19.6081 -453.9248,-87.1478 -555.4768,-119.8281 l -113.787,-35.9485 -7.3412,28.323 c -14.6822,52.2886 -66.07,133.9897 -115.0106,180.8316 -99.1049,94.7732 -245.927,140.5258 -452.7014,140.5258 -161.5043,-1.0894 -281.4089,-16.3402 -483.2893,-63.1821 -86.8696,-19.6084 -185.9746,-39.2166 -217.786,-43.5739 -83.1992,-10.8935 -152.9397,15.2508 -222.6801,83.8797 -30.588,30.5016 -58.7289,52.2886 -62.3994,49.0206 -14.6822,-13.0722 73.4111,-108.9348 127.2458,-139.4363 73.4111,-41.3953 160.2808,-41.3953 369.5022,-3.2681 206.7744,38.1271 518.7713,47.9313 636.2289,20.6975 145.5986,-32.6804 248.374,-107.8453 286.3031,-210.2439 29.3643,-75.165 25.6937,-102.3985 -23.2468,-143.7938 -42.8231,-37.0377 -79.5287,-112.2027 -79.5287,-164.4914 0,-35.9484 -11.4388,135.6339 -296.5182,117.1151 -222.6803,-15.2509 -419.2394,-179.2078 -498.768,-154.1528 -33.035,9.8041 -74.6345,35.9484 -105.2224,65.3608 -51.3878,49.0206 -51.3878,49.0206 -134.587,49.0206 -161.5043,0 -294.8676,41.3952 -373.1728,116.5601 -63.6229,59.9141 -75.858,96.9519 -69.7403,202.6185 4.894,71.8969 14.6821,108.9347 51.3876,187.3676 62.3994,131.811 63.6229,137.2577 28.141,188.457 -50.1642,69.7182 -92.9874,168.8488 -107.6696,249.4604 -44.0466,236.3883 129.6928,395.433 510.2067,467.3298 79.5286,14.1615 163.9513,30.5017 187.1981,34.8592 39.1526,7.6253 42.823,13.0721 79.5286,105.6665 99.1049,247.2817 267.9503,458.6151 477.1718,599.1407 117.4576,77.3437 304.6558,148.1513 478.3952,180.8316 108.893,20.6977 406.2077,17.4297 538.3475,-5.4467 215.339,-37.0377 195.7627,-39.2165 299.7618,38.1271 243.4799,181.921 537.124,312.6425 814.8623,363.8418 124.7989,22.8764 409.8784,15.2509 535.9006,-15.2507 z m 619.0997,-2403.0991 c 209.2215,-20.6976 540.7945,-68.6288 554.2533,-80.6116 4.894,-4.3574 14.6822,-37.0378 22.0233,-72.9863 25.6938,-129.6322 128.4693,-757.096 124.7988,-760.3641 -2.447,-1.0893 -50.1642,5.4469 -106.446,16.3402 -316.891,62.0928 -671.7111,101.3094 -1069.354,118.7388 -731.6634,33.7698 -1594.243,-69.7181 -2258.6128,-272.3366 -61.1759,-17.4296 -112.5635,-32.6804 -115.0106,-32.6804 -2.447,0 -1.2236,11.9828 2.4471,27.2337 4.8939,15.2509 8.5646,144.8831 8.5646,288.6768 l 1.2235,261.4433 55.0583,43.5739 c 126.0222,98.0411 436.7956,203.7078 759.8041,255.9965 174.963,29.4123 226.3506,44.6632 112.5637,33.7697 -36.7057,-3.2681 -111.3401,-8.7147 -165.175,-13.0721 -297.3146,-19.6083 -622.7701,-103.4881 -785.4979,-200.44 -34.2585,-20.6974 -41.5996,-21.7868 -47.7172,-7.6253 -18.3528,44.6632 67.2934,124.1855 187.1981,173.2061 238.5858,95.8626 961.6846,203.7079 1624.8309,241.835 183.5275,9.8041 924.9789,-3.268 1095.0478,-20.6976 z M -5593,-1729 c -2,-10 3,-23 14,-29 24,-15 26,-15 32,2 4,10 0,12 -14,9 -14,-4 -18,-1 -13,10 3,8 1,18 -4,21 -5,3 -12,-2 -15,-13 z m -67,34 c 0,-2 10,-10 23,-16 20,-11 21,-11 8,4 -13,16 -31,23 -31,12 z m 1418,1098 c 7,-3 16,-2 19,1 4,3 -2,6 -13,5 -11,0 -14,-3 -6,-6 z m 1127.3069,259.31204 c -16.8597,118.96732 31.6329,1070.96855 17.6329,1067.96855 C -3492.1025,544.11917 -2774.8249,697.13997 -2780,682 c -346.0243,-1012.31769 57,-42 106,-42 49,0 161,26 180,41 15,12 6,50 -15,66 -17,14 -563.6931,-1071.68796 -605.6931,-1084.68796 z M -2540,2009 c 0,-5 5,-7 10,-4 6,3 10,8 10,11 0,2 -4,4 -10,4 -5,0 -10,-5 -10,-11 z m 40,26 c -13,-16 0,-21 16,-6 5,5 18,11 29,14 16,4 14,5 -6,6 -15,0 -32,-6 -39,-14 z m -5390,71 c 0,-3 9,-10 20,-16 11,-6 20,-8 20,-6 0,3 -9,10 -20,16 -11,6 -20,8 -20,6 z m 3703.5048,-679.7021 C -10340,6260 -10340,6260 -4186.4952,1426.2979 Z M -4602,1913 c 7,-3 16,-2 19,1 4,3 -2,6 -13,5 -11,0 -14,-3 -6,-6 z m 460,350 c 7,-3 16,-2 19,1 4,3 -2,6 -13,5 -11,0 -14,-3 -6,-6 z m -38,17 c 0,-5 5,-10 11,-10 5,0 7,5 4,10 -3,6 -8,10 -11,10 -2,0 -4,-4 -4,-10 z m 20,30 c 0,-5 5,-10 11,-10 5,0 7,5 4,10 -3,6 -13.7194,-12.8776 -16.7194,-12.8776 -2,0 1.7194,18.8776 1.7194,12.8776 z m -3650,76 c 0,-2 8,-10 18,-17 15,-13 16,-12 3,4 -13,16 -21,21 -21,13 z m 3215,564 c -3,-5 -1,-10 4,-10 6,0 11,5 11,10 0,6 -2,10 -4,10 -3,0 -8,-4 -11,-10 z m 206,124 c 0,-11 3,-14 6,-6 3,7 2,16 -1,19 -3,4 -6,-2 -5,-13 z m -3021.8081,-917.6051 -698.9469,595.9132 -36.8716,-24.0934 c -262.0877,-167.6064 -580.9776,-382.352 -603.8978,-406.4455 -35.8752,-36.6639 -26.9064,-61.8048 11.9583,-33.5212 85.7017,63.8999 638.7764,402.2553 598.9152,366.6389 -8.9688,-7.3328 -13.9514,-19.9032 -11.9584,-26.1885 2.9896,-7.3328 -1.993,-13.618 -9.9653,-13.618 -7.9722,0 -13.9514,-8.3803 -12.9549,-17.8082 0,-9.4278 -7.9722,-23.0459 -18.9341,-28.2836 -11.9584,-6.2852 -18.9341,-19.9032 -16.941,-29.3311 1.9931,-10.4754 -0.9965,-18.8557 -5.9792,-18.8557 -4.9826,0 -55.8057,-46.0917 -111.6115,-101.6114 -249.1327,-248.2669 -252.1223,-252.4571 -216.2472,-310.0718 8.9688,-15.7131 16.941,-32.4737 16.941,-38.7589 0,-7.3328 7.9723,-9.4279 21.9237,-4.1902 21.9237,7.3328 21.9237,6.2853 4.9827,-17.8082 -33.8821,-49.2343 -56.8023,-102.6589 -62.7815,-147.7031 -3.9861,-25.1409 -14.948,-51.3294 -25.9098,-58.6622 -9.9653,-7.3328 -17.9376,-26.1885 -18.9341,-41.9016 0,-25.141 -0.9965,-26.1885 -8.9688,-7.3328 -7.9722,19.9033 -8.9688,19.9033 -8.9688,-2.0951 -0.9965,-13.618 -6.9757,-24.0934 -14.9479,-24.0934 -6.9757,0 -20.9272,-11.5229 -29.896,-26.1885 -8.9687,-14.6655 -20.9271,-26.1885 -26.9063,-26.1885 -5.9792,0 -17.9376,-8.3803 -26.9063,-17.8082 -15.9445,-16.7606 -15.9445,-16.7606 1.993,-10.4754 12.9549,5.2377 16.9411,3.1427 12.9549,-7.3327 -2.9896,-8.3804 4.9827,-32.4738 18.9341,-54.4721 13.9515,-20.9508 22.9202,-39.8065 21.9237,-41.9016 -1.9931,-2.0951 -34.8786,23.0459 -72.7468,55.5196 -38.8647,31.4262 -79.7224,65.995 -92.6774,76.4704 l -22.9202,19.9033 90.6844,91.1359 c 50.823,51.3295 117.5906,114.1819 149.4796,139.3228 l 58.7954,47.1393 -36.8717,48.1869 c -19.9306,26.1885 -38.8647,49.2343 -41.8543,52.377 -2.9896,3.1426 -26.9063,32.4737 -53.8127,65.995 -53.8127,67.0425 -70.7537,73.3278 -32.8855,10.4754 12.9549,-21.9984 35.8751,-64.9475 50.8231,-95.3262 l 26.9063,-55.5196 -116.5941,-138.2752 c -63.778,-76.4704 -120.5803,-148.7507 -126.5595,-161.3212 -6.9757,-17.8081 -4.9826,-32.4737 12.9549,-68.0901 41.8543,-84.8507 84.4407,-113.4405 194.0591,-248.5731 60.7884,-74.3753 192.5325,-285.8452 353.7407,38.3162 l -265.4412,-352.9183 c -473.8469,-253.5884 142.1637,-2004.3449 150.1359,-2101.7661 12.9549,-174.9392 9.9653,-266.0752 -12.9549,-370.8292 -18.9341,-85.8982 -14.9479,-112.0867 21.9237,-138.2752 107.6254,-76.4704 225.216,-299.5964 450.432,-846.4122 141.5075,-345.6882 138.5179,-339.4029 285.0079,-477.6782 68.7607,-64.9475 149.4797,-148.7507 179.3756,-184.367 96.6635,-119.4196 126.5595,-143.513 251.1258,-207.4129 156.4554,-78.5655 278.0322,-124.6572 1484.8313,-553.101 l 77.7295,-28.2836 101.6461,54.472 c 128.5525,69.1377 368.7165,209.508 521.1858,303.7866 65.771,40.8541 154.4623,93.2311 198.3097,118.372 182.3651,102.6589 179.3755,99.5163 269.0633,240.9342 95.667,151.8933 182.3652,316.357 249.1328,471.3929 75.7364,178.0818 101.6462,225.2211 156.4554,294.3587 28.8994,35.6164 87.6947,113.1343 131.5421,170.749 92.6774,124.6573 195.3201,253.5047 519.1927,650.5223 131.5421,161.3211 266.0738,328.9275 298.9593,371.8766 32.8855,42.9491 72.7468,94.2786 89.6878,114.1819 32.8855,38.7589 147.4866,101.6113 153.4658,83.8031 2.9896,-11.5229 -94.6705,-150.8457 -233.1883,-328.9275 -49.8266,-62.8524 -105.6323,-136.1802 -124.5664,-162.3686 -18.9341,-26.1885 -137.5213,-177.0343 -264.0807,-335.2128 -456.4112,-573.0043 -601.9048,-765.7516 -652.7279,-863.1728 -16.941,-34.5689 -43.8473,-78.5655 -57.7988,-98.4688 -14.9479,-20.9508 -21.9237,-34.5688 -16.941,-32.4737 34.8786,14.6655 346.7928,218.9358 426.5153,278.6456 242.157,179.1293 543.1094,410.6356 607.8839,465.1077 39.8613,32.4737 72.7468,58.6622 74.7399,57.6147 0.9965,-2.0951 -61.7849,-150.8458 -140.5109,-332.0702 -143.5005,-328.9275 -295.9697,-693.4714 -295.9697,-706.0418 0,-11.523 73.7433,7.3327 91.6808,23.0458 8.9688,8.3804 31.889,53.4246 50.8231,100.5639 19.9306,47.1393 73.7433,172.844 121.5768,279.6931 47.8335,106.8491 110.615,252.4571 141.5074,324.7374 29.8959,72.2802 81.7156,189.6047 113.6046,260.8374 32.8855,71.2327 58.7953,131.99 58.7953,134.0851 0,18.8557 111.6115,164.4638 197.3131,256.6473 l 103.6393,112.0867 -11.9584,71.2327 c -7.9723,38.759 -12.9549,121.5147 -12.9549,182.272 0,117.3244 18.9341,199.0325 68.7606,304.8341 12.9549,26.1885 25.9098,68.0901 29.896,92.1835 551.2289,1413.8639 394.6658,1272.4392 42.8508,2039.5601 l 137.5213,172.844 c 75.7364,94.2786 161.438,203.2228 191.334,241.9818 l 52.8161,71.2327 -84.7051,133.0375 c -157.4519,245.1244 -161.4381,278.6456 -47.8335,402.2553 27.9028,31.4262 40.8577,53.4246 35.8751,59.7098 -5.9792,5.2377 -135.5282,89.0409 -288.994,186.4621 -153.4658,97.4212 -315.9004,203.2227 -361.7408,233.6014 -73.7433,50.2819 -83.7086,53.4245 -99.6531,39.8065 -8.9688,-8.3803 -72.7468,-52.377 -141.5074,-97.4212 -193.327,-126.7523 -487.8953,-369.5226 -589.5415,-439.7078 292.7066,255.9831 -2022.4664,-192.3464 -3515.7879,-45.1662 z m 4253.8125,257.5578 c 0.9965,-56.5671 0,-60.7573 -20.9271,-58.6622 -12.9549,1.0476 -49.8266,-16.7606 -82.7121,-40.854 -32.8855,-23.0459 -77.7294,-54.4721 -99.6531,-69.1377 -54.3673,-16.2962 -120.5555,-137.8817 -116.5942,-59.7097 -1.993,7.3327 2.9896,15.7131 10.9619,18.8557 8.9688,3.1426 10.9618,0 5.9792,-8.3803 -4.9827,-8.3804 -2.9896,-11.523 5.9792,-8.3804 7.9722,3.1427 12.9549,12.5705 12.9549,21.9984 -0.9966,9.4278 1.993,14.6655 6.9757,11.5229 18.9341,-11.5229 29.8959,8.3803 11.9584,20.9508 -40.8578,29.3311 -105.6323,29.3311 -82.7121,1.0475 8.9688,-10.4754 5.9792,-16.7606 -8.9688,-25.1409 -25.9098,-14.6656 -33.8821,-14.6656 -24.9133,2.0951 4.9827,7.3327 0,6.2852 -10.9618,-3.1426 -10.9619,-9.4279 -15.9445,-10.4754 -10.9619,-2.0951 3.9862,6.2852 2.9896,12.5704 -1.993,12.5704 -4.9827,0 -13.9515,-11.5229 -19.9306,-26.1884 -11.9584,-26.1885 -31.889,-35.6164 -31.889,-14.6656 0,5.2377 4.9826,7.3328 11.9583,3.1426 6.9757,-4.1901 7.9723,-3.1426 3.9862,5.2377 -3.9862,6.2853 -11.9584,8.3803 -17.9376,5.2377 -5.9792,-4.1901 -12.9549,-3.1426 -16.941,2.0951 -2.9896,5.2377 -24.9133,23.0459 -47.8335,38.759 -43.8474,29.3311 -56.8023,55.5196 -23.9168,46.0917 12.9549,-3.1426 17.9376,0 14.948,8.3803 -2.9896,6.2853 11.9584,24.0935 32.8855,38.759 20.9272,15.7131 70.7537,52.377 111.6115,81.7081 40.8578,30.3787 141.5074,99.5163 224.2195,153.9884 l 150.4762,98.4687 5.9792,-97.4212 c 3.9861,-53.4245 6.9757,-124.6572 7.9722,-157.131 z m -4846.1305,-14.6655 c 18.934,-20.9508 33.882,-45.0442 33.882,-53.4245 0,-8.3804 6.9757,-29.3312 15.9445,-48.1869 15.9445,-32.4737 15.9445,-33.5213 -1.9931,-16.7606 -10.9618,9.4278 -44.8439,32.4737 -76.7328,51.3294 -48.8301,28.2836 -57.7988,37.7115 -52.8162,56.5672 2.9896,12.5705 5.9792,28.2836 5.9792,35.6163 0,25.141 41.8543,11.523 75.7364,-25.1409 z m 2403.6329,-339.4029 c -5100.2458,3096.7131 -5100.2458,3096.7131 0,0 z m 2051.8574,136.1802 c -7152.1032,2960.5329 -7152.1032,2960.5329 0,0 z m -2074.7776,-874.6958 c 0,-485.011 -2.9896,-611.7633 -11.9584,-607.5731 -19.9306,7.3327 -159.445,106.849 -257.105,183.3194 -264.0808,205.3178 -482.3211,379.2095 -492.2864,391.7799 -8.9687,11.523 5.9792,27.2361 75.7364,82.7557 136.5247,105.8015 236.1779,189.6047 410.5708,341.498 124.5664,109.9917 263.0842,221.0309 274.046,221.0309 0,0 0.9966,-275.503 0.9966,-612.8108 z m 852.034,540.5305 c 18.9341,31.4262 23.9168,-10.4754 25.9098,-224.1735 1.9931,-175.9867 0,-227.3161 -11.9583,-248.2669 -12.9549,-25.141 -13.0359,-24.0622 -14.948,26.1885 l -1.9931,52.377 -5.9792,-47.1393 c -6.9757,-52.377 -19.9306,-61.8049 -44.8439,-32.4738 -15.9445,17.8082 -15.9445,20.9508 -0.9965,36.6639 8.9688,9.4279 20.9272,14.6656 25.9098,11.523 4.9827,-4.1902 8.9688,-2.0951 8.9688,3.1426 0,6.2852 -7.9722,13.618 -16.941,16.7606 -9.9653,4.1902 -13.9515,4.1902 -9.9653,0 3.9861,-4.1901 -1.9931,-14.6655 -13.9515,-23.0459 -10.9618,-8.3803 -22.9202,-11.5229 -26.9063,-7.3327 -2.9896,3.1426 0,11.5229 7.9722,16.7606 11.9584,8.3803 9.9653,9.4279 -5.9791,5.2377 -13.9515,-4.1902 -26.9064,1.0475 -39.8613,16.7606 l -18.9341,24.0935 22.9202,-19.9033 c 11.9584,-11.5229 21.9237,-14.6656 21.9237,-8.3803 0,6.2852 -4.9826,14.6655 -9.9653,17.8082 -5.9792,4.1901 -7.9722,10.4754 -4.9826,15.7131 2.9895,5.2376 -8.9688,7.3327 -26.9064,5.2376 -17.9375,-2.095 -26.9063,-1.0475 -19.9306,2.0951 9.9653,4.1902 8.9688,9.4279 -3.9861,25.141 -8.9688,10.4754 -22.9202,19.9032 -29.896,19.9032 -7.9722,0 -10.9618,6.2853 -7.9722,15.7131 4.9826,11.523 -2.9896,17.8082 -24.9133,21.9984 -21.9237,5.2377 -28.8994,10.4754 -21.9237,18.8557 6.9757,8.3803 0.9966,18.8557 -19.9306,32.4737 -15.9445,11.523 -28.8994,24.0934 -28.8994,29.3311 0,4.1902 -8.9688,7.3328 -19.9306,7.3328 -10.9619,0 -19.9306,4.1902 -19.9306,9.4279 0,9.4278 47.8335,21.9983 84.7051,21.9983 13.9514,0 24.9133,7.3328 27.9029,20.9508 2.9896,12.5705 13.9514,20.9508 25.9098,20.9508 16.941,0 20.9271,-6.2852 21.9237,-33.5213 0,-29.3311 1.993,-31.4262 8.9687,-13.618 3.9862,12.5705 14.948,28.2836 23.9168,35.6164 8.9688,7.3328 15.9445,23.0459 15.9445,33.5213 0,11.5229 4.9826,19.9032 9.9653,19.9032 5.9792,0 9.9653,-18.8557 9.9653,-41.9016 0,-40.854 31.889,-90.0884 51.8196,-77.5179 13.9515,9.4278 8.9688,35.6163 -6.9757,35.6163 -10.9618,0 -14.948,11.523 -14.948,39.8065 0,30.3787 4.9827,40.8541 24.9133,50.2819 17.9376,9.4279 24.9133,9.4279 28.8994,0 1.9931,-6.2852 4.9827,-4.1901 4.9827,5.2377 0.9965,8.3804 -3.9862,20.9508 -10.9619,28.2836 -8.9688,9.4279 -8.9688,12.5705 0,12.5705 6.9757,0 12.9549,10.4754 12.9549,24.0934 0.9966,19.9033 1.9931,19.9033 5.9792,3.1426 3.9861,-15.7131 6.9757,-16.7606 12.9549,-5.2377 z m -2258.1394,-81.7081 c -17.9375,-82.7556 -122.5733,-375.0192 -208.275,-584.5272 -25.9098,-62.8524 -66.7675,-164.4638 -89.6878,-225.2211 -77.7294,-200.0801 -186.3513,-419.0159 -208.2749,-419.0159 -3.9862,0 -4.9827,8.3803 -0.9966,18.8557 3.9861,9.4279 8.9688,29.3311 10.9619,43.9967 1.993,14.6655 6.9757,42.9491 9.9653,63.8999 4.9826,31.4262 0,43.9967 -33.8821,89.0409 -67.7641,90.0884 -89.6878,112.0868 -116.5941,112.0868 -13.9514,0 -24.9133,4.1901 -24.9133,9.4278 0,5.2377 -4.9826,6.2853 -9.9653,3.1426 -5.9792,-4.1901 -7.9722,-9.4278 -5.9792,-13.618 1.9931,-4.1901 0.3498,20.3518 -18.9341,-7.3328 -667.7242,-958.6096 -386.6962,-76.8394 -372.7447,-59.0312 66.8792,164.9613 825.826,693.6669 1013.5142,929.5369 28.8994,36.6639 54.8092,67.0425 57.7988,67.0425 1.9931,0 0.9965,-12.5705 -1.9931,-28.2836 z m 1899.3882,7.3328 c -11.9583,-8.3803 -11.9583,-10.4754 -0.9965,-10.4754 7.9723,0 11.9584,-2.0951 9.9653,-5.2377 -2.9896,-2.0951 -15.9445,-1.0475 -28.8994,2.0951 -21.9237,6.2852 -22.9202,7.3328 -3.9861,14.6655 26.9063,11.523 41.8543,10.4754 23.9167,-1.0475 z m 79.7225,-10.4754 c 11.9584,-8.3803 8.9688,-10.4754 -11.9583,-10.4754 -15.9445,0 -27.9029,5.2377 -27.9029,10.4754 0,13.618 19.9306,13.618 39.8612,0 z m -79.7225,-46.0917 c 7.9723,-24.0935 3.9862,-37.7115 -10.9618,-37.7115 -5.9792,0 -7.9722,4.1902 -4.9827,9.4279 9.9654,15.7131 -4.9826,42.9491 -22.9202,42.9491 -9.9653,0 -25.9098,6.2853 -36.8716,14.6656 -16.941,13.618 -13.9515,14.6655 23.9167,4.1901 28.8994,-7.3327 45.8405,-18.8557 51.8196,-33.5212 z m -1707.0577,-83.8032 c 9.9653,-8.3803 51.8196,-43.9967 92.6774,-78.5655 40.8578,-34.5688 88.6913,-75.4229 104.6358,-91.136 16.941,-14.6655 59.7918,-53.4245 97.66,-84.8507 36.8717,-32.4738 66.7676,-62.8524 66.7676,-69.1376 0,-19.9033 -397.2024,-421.4273 -664.6862,-673.5682 l -183.3617,-172.844 -86.6982,3.1426 c -70.7537,2.0951 -86.6982,6.2852 -89.6878,19.9032 -1.9931,10.4754 29.8959,54.4721 74.7398,104.754 43.8474,48.1868 113.6045,130.9425 156.4554,182.2719 41.8543,52.377 87.6947,105.8016 100.6496,120.4671 22.9202,24.0934 63.778,97.4212 98.6566,175.9867 7.9722,17.8082 19.9306,33.5213 24.9133,33.5213 5.9792,0 10.9618,6.2852 10.9618,14.6656 0,15.7131 29.8959,80.6605 41.8543,90.0884 3.9861,3.1426 14.948,36.6639 23.9168,73.3278 9.9653,37.7114 20.9271,70.1851 23.9167,73.3278 28.8994,26.1885 108.6219,263.98 89.6878,270.2653 -9.9653,4.1901 -13.9514,23.0458 -4.9827,23.0458 2.9896,0 12.955,-6.2852 21.9237,-14.6655 z m 1800.7317,-39.8065 c -2.9896,-4.1902 -10.9619,-5.2377 -18.9341,-1.0476 -20.9272,7.3328 -18.9341,12.5705 3.9861,10.4754 10.9618,0 17.9376,-5.2377 14.948,-9.4278 z m 301.9489,-238.8391 c -0.9966,-11.523 -4.9827,-20.9508 -8.9688,-20.9508 -9.9653,0 -9.9653,4.1901 -1.9931,25.1409 7.9723,23.0459 12.9549,20.9508 10.9619,-4.1901 z m -36.8717,-20.9508 c 0,-5.2377 -1.993,-10.4754 -3.9861,-10.4754 -2.9896,0 -7.9722,5.2377 -10.9618,10.4754 -2.9896,6.2852 -0.9966,10.4754 3.9861,10.4754 5.9792,0 10.9618,-4.1902 10.9618,-10.4754 z m 29.896,-14.6656 c 0,-3.1426 -3.9862,-8.3803 -9.9654,-11.5229 -4.9826,-3.1426 -9.9653,-1.0476 -9.9653,4.1901 0,6.2853 4.9827,11.523 9.9653,11.523 5.9792,0 9.9654,-2.0951 9.9654,-4.1902 z m 29.8959,-48.1868 c 0,-5.2377 -3.9861,-10.4754 -8.9688,-10.4754 -5.9792,0 -12.9549,5.2377 -15.9445,10.4754 -2.9896,6.2852 0.9965,10.4754 8.9688,10.4754 8.9688,0 15.9445,-4.1902 15.9445,-10.4754 z m 1998.0448,-168.6539 -127.556,31.4262 38.8647,-6.2853 c 20.8959,-3.3793 116.5661,-32.0085 88.6913,-25.1409 z m -1878.4611,-30.3787 c 0,-5.2377 -1.993,-10.4754 -3.9861,-10.4754 -2.9896,0 -7.9723,5.2377 -10.9619,10.4754 -2.9895,6.2852 -0.9965,10.4754 3.9862,10.4754 5.9792,0 10.9618,-4.1902 10.9618,-10.4754 z m 70.7537,-58.6622 c 9.9653,-9.4279 18.9341,-25.141 18.9341,-33.5213 0,-8.3803 5.9792,-12.5705 13.9514,-9.4279 18.9341,8.3804 52.8162,-30.3786 33.8821,-38.7589 -8.9688,-4.1902 -7.9722,-5.2377 2.9896,-3.1427 21.9237,3.1427 89.6878,-47.1392 84.7051,-62.8523 -2.9896,-7.3328 0.9966,-10.4754 6.9758,-7.3328 9.9653,4.1901 207.2784,-145.6081 364.7303,-276.5505 18.9341,-15.7131 45.8405,-36.6639 59.7919,-46.0918 13.9514,-9.4279 36.8716,-27.236 50.8231,-38.759 l 24.9132,-21.9983 -44.8439,5.2377 c -24.9132,2.0951 -129.549,7.3328 -234.1848,10.4754 -307.9281,10.4754 -720.4919,40.854 -734.4433,55.5196 -6.9758,7.3328 -20.9272,12.5705 -31.889,11.5229 -17.9376,-1.0475 -17.9376,-2.095 3.9861,-10.4754 19.9306,-7.3327 15.9445,-7.3327 -14.948,-4.1901 -21.9237,3.1426 -79.7225,7.3328 -129.549,11.5229 -48.83,3.1426 -118.5872,11.523 -154.4623,17.8082 l -64.7746,13.618 111.6115,-1.0475 c 60.7884,0 103.6393,-3.1426 94.6705,-7.3328 -8.9688,-4.1902 -11.9584,-7.3328 -4.9827,-7.3328 21.9237,-2.0951 41.8543,11.523 36.8717,25.141 -5.9792,16.7606 32.8855,47.1393 60.7884,47.1393 10.9618,0 26.9063,-9.4279 34.8786,-21.9984 7.9722,-12.5704 23.9167,-26.1885 34.8785,-30.3786 17.9376,-8.3803 17.9376,-9.4279 -4.9826,-9.4279 -14.948,-1.0475 -30.8925,4.1902 -37.8682,11.523 -15.9445,16.7606 -22.9202,6.2852 -7.9722,-14.6656 9.9653,-14.6656 17.9375,-15.7131 65.771,-3.1426 47.8335,11.5229 50.8231,13.618 24.9133,16.7606 -41.8543,6.2853 -32.8855,24.0934 12.9549,28.2836 46.8369,4.1901 124.5664,63.8999 84.7051,64.9475 -19.9306,0 -22.9202,5.2377 -22.9202,39.8065 0,21.9983 6.9757,49.2343 14.948,60.7573 13.9514,18.8557 15.9445,18.8557 25.9098,2.0951 5.9792,-11.523 21.9237,-18.8558 38.8647,-18.8558 28.8994,0 29.8959,1.0476 29.8959,51.3295 0,35.6164 3.9862,53.4245 14.948,57.6147 11.9584,4.1902 14.948,-5.2377 14.948,-51.3295 0,-31.4262 4.9826,-57.6147 9.9653,-57.6147 5.9792,0 9.9653,34.5689 9.9653,83.8032 0,49.2344 -3.9861,83.8032 -9.9653,83.8032 -4.9827,0 -9.9653,5.2377 -9.9653,10.4754 0,6.2853 5.9791,10.4754 12.9549,10.4754 27.9028,1.0476 38.0633,16.1042 27.9028,50.2819 l -9.9653,33.5213 35.8751,-4.1901 c 19.0442,-2.2244 43.8474,-12.5705 53.8127,-23.0459 z M -7738.0489,480.1942 c -2961.6901,4676.4032 -2961.6901,4676.4032 0,0 z m 2210.3059,15.7131 c 86.6982,-123.6097 235.1813,-321.5948 358.7512,-478.7257 157.4519,-199.0326 240.164,-316.3571 235.1813,-331.0226 -2.9896,-8.3804 -0.9965,-25.141 3.9862,-37.7115 l 8.9687,-24.0934 v 25.141 c 0.9966,21.9983 7.9723,15.7131 50.8231,-41.9016 147.4866,-199.0326 217.2438,-437.8717 279.0287,-956.4039 24.9133,-214.7457 59.7919,-585.5748 54.8092,-590.8125 -1.993,-2.0951 -58.7953,24.0934 -126.5594,58.6622 -151.4727,78.5655 -892.8919,477.6782 -900.8641,487.1061 -2.9896,3.1426 17.9376,18.8557 47.8335,34.5688 28.8994,15.7131 66.7676,38.759 82.7121,51.3294 16.941,13.6181 54.8092,36.6639 84.7051,52.377 122.5733,64.9475 251.1258,191.6998 304.9385,300.644 18.9341,37.7114 75.7364,263.98 107.6254,427.3962 24.9132,123.6097 26.9063,167.6064 6.9757,114.1819 -8.9688,-21.9984 -9.9653,-19.9033 -9.9653,19.9032 -0.9966,24.0934 -5.9792,43.9967 -10.9619,43.9967 -12.9549,0 -11.9583,4.1902 -49.8265,-183.3195 -27.9029,-141.4179 -47.8335,-216.8407 -48.83,-188.5571 0,6.2852 16.941,94.2785 37.8681,197.985 20.9272,102.6589 35.8752,194.8424 33.8821,205.3178 -7.9723,31.4262 -77.7294,35.6164 -625.8215,35.6164 -490.2933,1.0475 -511.2204,0 -582.9707,-20.9508 -87.6947,-26.1885 -142.5039,-27.2361 -147.4866,-3.1427 -0.9965,8.3804 26.9064,51.3295 63.778,94.2786 108.6219,127.7999 384.661,469.2979 477.3384,590.8125 112.608,148.7507 175.3895,225.2211 183.3617,224.1735 2.9896,0 39.8612,-48.1868 80.719,-106.849 z m -232.1917,59.7097 c -2.9896,-3.1426 -11.9584,-4.1901 -18.9341,-1.0475 -7.9723,3.1426 -4.9827,6.2852 5.9792,6.2852 10.9618,1.0476 16.941,-2.095 12.9549,-5.2377 z m -38.8647,-67.0425 c -6.9758,-11.5229 -15.9445,-20.9508 -19.9307,-20.9508 -4.9826,0 -7.9722,-6.2852 -7.9722,-12.5705 0,-25.1409 -245.1466,-349.8783 -443.4563,-588.7174 -142.504,-171.7965 -242.1571,-306.9292 -272.053,-367.6865 -44.8439,-95.3261 -87.6947,-231.5063 -131.5421,-419.0159 -21.9237,-94.2786 -59.7919,-229.4112 -83.7086,-299.5964 -61.7849,-183.3195 -125.5629,-359.3062 -133.5352,-367.6865 -7.9722,-8.3803 -5.9792,61.8048 7.9723,384.4471 11.9583,270.2653 12.9549,497.5815 1.993,497.5815 -9.9653,0 -15.9445,-102.659 -32.8855,-534.2454 -5.9792,-158.1785 -13.9514,-295.4062 -18.9341,-304.8341 -3.9861,-9.4278 -3.9861,-23.0458 0.9965,-31.4262 4.9827,-8.3803 8.9688,-18.8557 8.9688,-25.1409 -0.9965,-5.2377 -4.9826,-2.0951 -10.9618,8.3803 -4.9827,9.4279 -11.9584,56.5671 -13.9514,104.754 -2.9896,47.1393 -7.9723,100.5638 -11.9584,117.3244 -2.9896,17.8082 -6.9757,40.8541 -7.9723,52.377 -2.9896,43.9967 -27.9028,152.9409 -35.8751,158.1786 -4.9826,3.1426 -8.9688,15.7131 -8.9688,28.2835 0,13.6181 -8.9687,41.9016 -19.9306,64.9475 -10.9618,23.0459 -19.9306,50.2819 -19.9306,60.7573 0,10.4754 -3.9861,16.7607 -8.9688,12.5705 -5.9792,-3.1426 -18.9341,15.7131 -29.8959,41.9016 -10.9619,26.1885 -26.9064,54.4721 -35.8751,63.8999 -33.8821,36.6639 -32.8856,38.759 244.1501,428.4438 86.6982,121.5146 177.3825,240.9342 203.2923,267.1227 58.7953,57.6147 82.7121,105.8015 91.6809,179.1293 3.9861,31.4262 14.9479,73.3278 23.9167,93.231 9.9653,19.9033 22.9202,56.5672 29.8959,80.6606 21.9237,77.518 33.8821,83.8032 270.06,129.895 117.5906,24.0934 228.2056,45.0442 245.1466,48.1868 19.9306,3.1426 29.8959,9.4278 25.9098,16.7606 -3.9861,6.2853 -0.9965,7.3328 5.9792,2.0951 11.9584,-7.3328 46.837,26.1885 78.7259,74.3753 10.9619,17.8082 10.9619,16.7607 1.9931,-3.1426 -12.9549,-29.3311 0.9965,-31.4262 17.9376,-3.1426 6.9757,11.5229 17.9375,20.9508 24.9132,20.9508 6.9758,0 25.9099,14.6656 41.8544,31.4262 33.882,36.6639 39.8612,39.8065 22.9202,10.4754 z m 566.0296,-178.0818 c 55.8057,-60.7573 128.5525,-145.608 161.438,-188.5572 32.8856,-42.9491 68.7607,-87.9933 80.7191,-98.4687 10.9618,-11.5229 20.9271,-27.236 20.9271,-35.6164 0,-8.3803 24.9133,-39.8065 54.8092,-70.1851 29.896,-31.4262 54.8092,-58.6623 54.8092,-61.8049 0,-3.1426 12.9549,-19.9032 28.8994,-37.7114 30.8925,-35.6164 45.8405,-86.9458 32.8856,-111.0392 -10.9619,-19.9033 -98.6566,71.2327 -106.6289,111.0392 -6.9757,35.6163 -24.9132,52.377 -24.9132,24.0934 0,-14.6656 -4.9827,-12.5705 -27.9029,12.5705 -137.5213,158.1785 -480.328,612.8108 -480.328,637.9517 0,17.8082 116.5941,-85.8982 205.2854,-182.2719 z M -6768.4242,69.5585 c 2.9896,-5.2377 -2.9896,-10.4754 -14.9479,-10.4754 -11.9584,0 -17.9376,5.2377 -14.948,10.4754 2.9896,6.2853 9.9653,10.4754 14.948,10.4754 4.9826,0 11.9583,-4.1901 14.9479,-10.4754 z m 2333.8758,-111.0392 c 4.9826,-14.6655 -32.8855,-55.5196 -52.8162,-56.5671 -19.9306,0 -35.8751,30.3786 -29.8959,55.5196 4.9827,20.9508 9.9653,23.0459 40.8578,19.9032 19.9306,-2.095 38.8647,-11.5229 41.8543,-18.8557 z m -2339.8549,-15.7131 c -17.9376,-11.5229 -48.8301,-12.5705 -48.8301,-1.0475 0,20.9508 22.9202,32.4737 42.8509,20.9508 15.9445,-8.3803 16.941,-12.5705 5.9792,-19.9033 z m 2829.1516,6.2853 c 80.7191,-5.2377 288.9941,-55.5196 356.7582,-84.8508 38.8647,-16.7606 41.8543,-36.6639 13.9514,-84.8507 -16.941,-29.3311 -263.0842,-364.5439 -279.0287,-380.257 -2.9896,-3.1426 -16.941,-21.9983 -31.889,-41.9016 -36.8716,-50.2819 -80.719,-102.6589 -72.7468,-85.8982 3.9862,7.3328 0,12.5705 -8.9687,12.5705 -8.9688,0 -15.9445,7.3327 -15.9445,16.7606 0,8.3803 -3.9862,12.5705 -9.9653,9.4279 -4.9827,-3.1427 -9.9654,-2.0951 -9.9654,4.1901 0,6.2853 -12.9549,17.8082 -28.8994,27.236 -15.9445,8.3804 -68.7606,56.5672 -117.5906,106.8491 -48.83,51.3295 -118.5872,120.4671 -155.4589,153.9884 -93.6739,85.8982 -132.5386,138.2752 -116.5941,158.1785 6.9757,8.3803 21.9237,15.7131 33.8821,15.7131 32.8855,0 114.601,58.6622 120.5802,85.8983 5.9792,26.1885 71.7502,71.2327 102.6427,71.2327 9.9653,0 26.9063,6.2852 37.8682,14.6655 11.9584,9.4279 33.882,13.618 58.7953,11.523 21.9237,-3.1427 76.7329,-7.3328 122.5733,-10.4754 z m -2394.6641,-300.644 c 14.948,-72.2802 21.9237,-143.5129 17.9376,-177.0342 -5.9792,-43.9967 47.8334,-221.0309 97.66,-325.7849 48.83,-101.6114 126.5594,-214.7457 182.3652,-263.98 75.7363,-67.0426 230.1987,-180.1769 317.8934,-234.649 l 77.7294,-47.1393 -127.556,-72.2802 c -180.3721,-102.6589 -738.4295,-395.9701 -843.0652,-443.1094 -65.7711,-29.3311 -90.6844,-36.6639 -98.6566,-28.2836 -25.9098,27.2361 42.8508,704.9944 101.6462,1008.7809 33.882,173.8916 60.7884,262.9325 117.5906,388.6373 39.8613,89.0409 123.5699,217.8883 141.5074,217.8883 4.9827,0 11.9584,-10.4754 14.948,-23.0459 z m 642.7625,-3.1426 c 62.7815,-7.3328 134.5317,-21.9983 159.445,-31.4262 64.7745,-24.0934 179.3756,-80.6606 179.3756,-87.9933 0,-3.1427 -104.6358,-3.1427 -231.1952,2.095 -259.0981,8.3804 -397.6159,2.0951 -438.4737,-19.9032 -14.9479,-8.3803 -37.8682,-31.4262 -51.8196,-52.377 l -23.9167,-37.7114 -12.9549,24.0934 c -5.9792,13.618 -30.8925,63.8999 -54.8093,111.0392 -23.9167,47.1393 -43.8473,90.0884 -43.8473,96.3737 0,16.7606 378.6818,13.618 518.1961,-4.1902 z m -511.2204,-95.3261 c 89.6878,-161.3212 88.6913,-158.1785 58.7953,-237.7916 -27.9028,-74.3753 -30.8924,-99.5163 -15.9445,-152.9408 14.948,-57.6147 3.9862,-50.2819 -27.9028,15.7131 -57.7988,123.6097 -73.7433,180.1769 -105.6323,377.1144 -2.9896,18.8557 -7.9723,45.0442 -10.9619,59.7097 -4.9826,19.9033 -1.993,27.2361 11.9584,31.4262 30.8925,8.3803 35.8751,3.1426 89.6878,-93.231 z m -1252.6395,-293.3112 c 101.6461,-148.7506 159.4449,-262.9325 203.2923,-402.2553 31.889,-99.5163 81.7155,-338.3554 100.6496,-475.5831 l 6.9757,-51.3294 -38.8647,31.4262 c -107.6253,90.0884 -620.8388,629.5714 -620.8388,652.6173 0,13.618 -255.2045,1114.9716 -230.2913,1101.3535 14.948,-8.3803 281.1144,-1110.7814 275.1352,-1101.3535 -3.9861,7.3328 -1.9931,10.4754 5.9792,8.3803 24.9132,-5.2377 77.7294,25.141 84.7051,48.1868 2.9896,11.523 17.9376,38.759 31.889,58.6623 14.948,19.9032 27.9029,48.1868 29.8959,62.8524 0.9966,14.6655 9.9653,48.1868 17.9376,75.4228 8.9688,27.2361 11.9584,55.5197 7.9722,61.8049 -4.9826,8.3803 -2.9896,9.4278 4.9827,4.1901 6.9757,-4.1901 10.9618,-18.8557 7.9722,-33.5212 -2.9895,-15.7131 0,-23.0459 6.9758,-20.9508 5.9791,2.0951 -484.9008,835.475 -485.8973,848.0455 -0.9966,25.141 501.8418,-792.5259 519.7793,-811.3816 8.9688,-9.4279 11.9584,-9.4279 11.9584,0 0,7.3328 -3.9861,12.5704 -9.9653,12.5704 -4.9827,0 -9.9653,7.3328 -9.9653,15.7131 0,9.4279 -5.9792,12.5705 -16.9411,8.3804 -13.9514,-5.2377 -15.9445,-3.1427 -5.9791,7.3327 8.9687,10.4754 2.8875,17.3624 -3.9862,40.8541 l -106.1411,362.7494 112.1203,-361.7019 c 11.9584,-14.6655 56.8023,-78.5654 100.6497,-142.4654 z m -833.1,-210.5555 c 27.9029,-30.3786 88.6912,-108.9441 135.5282,-175.9867 46.837,-67.0425 131.5421,-188.5572 189.3409,-271.3128 57.7988,-82.7557 122.5733,-177.0342 144.497,-209.508 42.8509,-64.9475 113.6046,-168.6539 152.4693,-224.1735 12.9549,-18.8557 25.9098,-32.4737 28.8994,-29.3311 2.9896,3.1426 0.9965,12.5705 -5.9792,19.9032 -22.9202,29.3311 -61.7849,115.2294 -56.8023,126.7524 1.9931,6.2852 4.9827,3.1426 4.9827,-8.3804 0.9965,-12.5704 5.9792,-16.7606 16.941,-12.5704 7.9722,3.1426 11.9584,2.095 8.9688,-4.1902 -5.9792,-10.4754 7.9722,-46.0918 15.9445,-40.8541 8.9688,5.2377 48.83,-13.618 48.83,-23.0458 0,-5.2377 7.9722,-9.4279 16.941,-9.4279 8.9688,0 12.9549,-3.1426 9.9653,-7.3328 -3.9861,-3.1426 6.9758,-14.6655 22.9202,-25.1409 16.9411,-11.523 29.896,-24.0934 29.896,-30.3787 0,-15.7131 41.8543,-62.8524 55.8057,-62.8524 7.9723,0 18.9341,-10.4754 24.9133,-23.0459 18.9341,-37.7114 35.8751,-52.3769 41.8543,-36.6638 1.9931,6.2852 7.9722,-5.2377 11.9584,-26.1885 3.9861,-21.9984 10.9618,-36.6639 15.9445,-33.5213 6.9757,4.1901 10.9618,-5.2377 7.9722,-18.8557 0,-2.0951 6.9757,-20.9508 14.948,-41.9016 8.9688,-21.9984 15.9445,-41.9016 15.9445,-45.0442 0,-5.2377 -138.5178,97.4212 -149.4797,109.9916 -30.8924,38.759 -722.485,526.9126 -855.0236,603.383 -52.8162,30.3787 -52.8162,30.3787 -46.837,72.2802 13.9514,87.9934 33.8821,284.9309 34.8786,327.88 0,37.7115 3.9861,46.0918 24.9133,54.4721 32.8855,12.5705 31.889,21.9983 -5.9792,51.3294 -16.941,13.6181 -27.9029,26.1885 -24.9133,29.3312 2.9896,3.1426 0,15.7131 -5.9792,28.2835 -10.9618,20.9508 -9.9653,20.9508 6.9757,6.2853 9.9654,-8.3803 41.8543,-39.8065 68.7607,-70.1852 z m 2672.6963,-696.614 c 9.9653,-48.1868 0.9965,-1391.1329 -9.9653,-1391.1329 -3.9861,0 -41.8543,34.5688 -83.7086,76.4704 -41.8543,40.854 -107.6254,105.8015 -146.4901,143.5129 -37.8682,37.7115 -109.6184,108.9442 -159.445,158.1786 -48.83,49.2343 -159.4449,157.1309 -244.1501,239.8866 -202.2958,196.9375 -390.6401,388.6373 -386.654,393.875 1.993,2.0951 72.7467,36.6639 157.4519,77.5179 84.7051,40.8541 181.3686,87.9934 214.2542,104.754 101.6461,52.377 155.4588,73.3278 166.4207,65.995 6.9757,-3.1426 7.9722,-1.0475 3.9861,5.2377 -3.9861,7.3328 3.9861,14.6656 20.9271,18.8557 14.948,4.1902 32.8856,11.523 39.8613,16.7607 6.9757,5.2377 15.9445,7.3328 20.9271,4.1901 5.9792,-3.1426 14.948,1.0476 21.9237,10.4754 6.9757,8.3804 18.9341,13.6181 26.9063,10.4754 8.9688,-4.1901 10.9619,-1.0475 6.9758,6.2853 -4.9827,7.3328 -1.9931,9.4278 8.9687,5.2377 15.9445,-6.2853 66.7676,13.618 66.7676,27.236 0,4.1902 8.9688,7.3328 19.9306,7.3328 11.9584,0 34.8786,8.3803 52.8162,17.8082 42.8508,23.0458 81.7155,32.4737 143.5005,33.5212 49.8265,1.0476 51.8196,0 58.7953,-32.4737 z m 186.3513,17.8082 c 11.9584,-8.3803 31.889,-15.7131 44.8439,-15.7131 23.9167,0 103.6392,-39.8065 109.6184,-54.4721 1.9931,-5.2377 14.948,-8.3803 27.9029,-8.3803 13.9514,0 21.9237,-4.1902 18.9341,-10.4754 -2.9896,-5.2377 0.9965,-10.4754 9.9653,-10.4754 8.9688,0 24.9133,-9.4279 36.8716,-20.9508 11.9584,-11.5229 27.9029,-20.9508 34.8786,-20.9508 6.9757,0 12.9549,-4.1902 12.9549,-10.4754 0,-5.2377 5.9792,-10.4754 12.9549,-10.4754 7.9723,0 23.9168,-9.4279 36.8717,-20.9508 12.9549,-11.5229 26.9063,-20.9508 31.889,-20.9508 14.9479,0 21.9237,-3.1426 85.7016,-33.5213 34.8786,-15.7131 69.7572,-29.3311 76.7329,-29.3311 7.9723,0 15.9445,-4.1901 18.9341,-9.4278 5.9792,-9.4279 -12.9549,-75.4229 -23.9167,-84.8508 -2.9896,-3.1426 -18.9341,-24.0934 -34.8786,-47.1393 l -27.9029,-41.9016 44.8439,47.1393 c 62.7815,65.995 105.6323,104.754 117.5907,104.754 4.9826,0 57.7988,-24.0934 116.5941,-52.377 l 107.6254,-53.4245 -79.7225,-80.6606 c -43.6794,-44.1933 -115.5976,-113.1343 -159.445,-153.9883 -118.5872,-109.9917 -234.1848,-224.1736 -638.7764,-636.9043 -71.7502,-73.3277 -136.5247,-133.0375 -143.5005,-133.0375 -7.9722,0 -9.9653,16.7606 -5.9791,60.7573 2.9895,32.4737 4.9826,350.9258 4.9826,706.0419 0.9965,606.5255 1.9931,646.332 18.9341,649.4747 48.83,11.5229 123.5699,7.3327 144.497,-7.3328 z m -2291.0249,-53.4246 c 4.9826,-14.6655 3.9861,-15.713 -8.9688,-4.1901 -16.941,14.6655 -18.9341,20.9508 -5.9792,20.9508 4.9827,0 11.9584,-7.3328 14.948,-16.7607 z m -399.609,-119.4195 c 48.8301,-75.4229 130.5456,-167.6064 332.8414,-377.1143 146.4901,-152.9409 401.602,-419.016 566.0297,-592.9076 215.2507,-226.2686 306.9315,-316.357 327.8587,-320.5472 27.9028,-6.2852 27.9028,-5.2377 21.9237,34.5688 -12.9549,83.8032 -99.6531,340.4505 -155.4589,455.6799 -51.8196,108.9441 -59.7919,135.1326 -34.8786,109.9916 5.9792,-5.2377 43.8474,-24.0934 84.7052,-42.9491 94.6704,-42.9491 164.4276,-77.5179 533.1441,-263.98 324.8691,-164.4638 443.4563,-228.3637 423.5257,-228.3637 -8.9688,0 -9.9653,-3.1426 -0.9965,-13.618 5.9791,-8.3804 7.9722,-17.8082 3.9861,-21.9984 -3.9861,-4.1901 0,-4.1901 9.9653,0 13.9514,5.2377 16.941,0 16.941,-23.0459 0,-48.1868 10.9619,-76.4704 30.8925,-82.7556 9.9653,-4.1902 18.9341,-15.7131 18.9341,-26.1885 0,-11.5229 8.9687,-25.141 19.9306,-31.4262 16.941,-9.4279 17.9375,-14.6656 8.9688,-33.5213 -8.9688,-16.7606 -8.9688,-24.0934 -0.9966,-27.236 5.9792,-2.0951 50.8231,-36.6639 98.6566,-77.518 47.8335,-40.854 111.6115,-90.0884 141.5074,-109.9916 l 53.8127,-36.6639 25.9098,20.9508 c 13.9514,10.4754 138.5178,98.4687 275.0426,195.8899 137.5213,97.4212 356.7581,259.7899 488.3002,361.4013 218.2403,168.6539 330.8483,247.2194 340.8136,237.7915 3.9862,-4.1902 -80.719,-170.749 -129.549,-253.5046 -50.8231,-87.9934 -132.5386,-188.5572 -183.3617,-228.3637 -39.8613,-30.3787 -306.9316,-195.89 -316.8969,-195.89 -1.9931,0 -107.6254,-62.8524 -235.1813,-139.3228 -128.5525,-76.4704 -260.0946,-155.0359 -292.9802,-172.844 l -60.7884,-33.5213 -113.6045,42.9491 c -62.587,23.6615 -315.9004,115.2294 -563.0401,203.2227 -817.1554,293.3112 -962.649,355.1161 -1023.4374,438.9192 -72.7467,98.4688 -157.4519,191.6998 -254.1154,280.7407 -119.5837,108.9442 -105.6323,83.8032 -277.0356,496.5339 -116.5941,278.6456 -163.4311,382.3521 -239.1675,522.7224 -37.8681,71.2327 -20.9271,50.2819 57.7988,-68.0901 z m 3534.5715,3830.615 c 773.7993,294.218 1111.0078,-550.7743 1110.1109,-551.1933 -1.9931,-0.7333 -558.1646,347.3085 -612.2629,585.3783 42.1055,-516.2019 -921.5991,-631.2631 -368.4425,-297.8369 -0.8969,-1.1523 228.3045,-735.6374 235.2802,-741.1893 13.6524,-10.5802 1012.4484,286.4537 1029.8876,271.2644 -626.3912,-180.459 -650.0337,-596.3478 -446.6461,-596.3478 0,0 -978.1021,1318.4514 -947.9272,1329.9246 z"
       sodipodi:nodetypes="cccccccccccccccccccsccccccccccccccccccccccccscccccccccccsccccccccccccscccccccccccccccccscccccccccccscccccscccscccccccccccccccscccccscccccccccccccccccscsccsccccccsscccscssscccccsssssccccccccccsscsssscssscsscsssccccccccccccscccsccscccccccsssscccccccccccssccccccccccccccccccccccccccscccscccsccccsccsccscccscccccccccscccccccccccscccccccscscsscccccccccccccsccccscccccsccccccscccscccscscscscccccscssccsccscsssscsccsssscsscccssccccccscscssscscccsccscccccssccscsccccsccsscccccccssscccscsccscsccsscssscssssscssscsssscsscsccccccsccccscccccccsccssccscccccsccsscssssscscscccccccccccscccccccccsccccccccccccccccssccccscsccsccccccssscscccccccccccccscccscscscccscsccscscccscccsccccccccsscsccccscscccccccccccsccscccscccccssccccccccccccccsccccccccccccssssccsccccssccsccccccssccssccccccsccccccsccccscccccsccccscccccsscccsscscssssssscsccccssccsccscccsccsccccccccccscscscscccsccccccccscccsccccccsccccccs"
       style="fill:#000000;fill-opacity:1" /></g><script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script></svg>
